----------------------------------------------------
函数模板:
1.参数化编程,降低软件成本。能够有效的节约开发成本,降低出错概率.
2.类型严格匹配是模板函数调用的先决条件.
3.函数模板不提供隐式类型转化,因此必须严格按照T
4.当模板函数和普通函数都符合调用规则时,优先使用普通函数,因为普通函数在编译期间就生成了函数体,而模板函数的生成需要在调用的时候,编译器才会编译。
5.编译器在处理函数模板的时候能够生成任意类型的函数,根据调用的时机产生不同的函数,编译器会对函数模板进行二次编译。
这是参数化编程的基础,也是成为编译时多态的由来。(在声明的地方对模板代码本身进行编译,在调用的地方对参数化以后的具体调用进行编译)。

-----------------------------------------------------
hpp文件的由来:
.h 和 .cpp 分离之后模板第二次编译时会失败
虽然可以放到.h里面,但是会破坏 .h 和 .cpp的传统

----------------------------------------------------
重复模板实例:
当在使用模板时,当模板函数相同时,在调用的时候只会使用一个模板函数,
通过命名空间来区分,在做项目的时候需要注意这样的使用技巧

----------------------------------------------------
类模板:
1.类模板用于实现类所需数据的类型参数化
2.类模板在表示数组、表、图等数据结构显得特别重要
3.这些数据结构的表示和算法不受所包含的元素类型的影响


